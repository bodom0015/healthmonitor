import argparse
import datetime
import re
import ruamel.yaml
import socket
import xmltodict
import requests
import json


def main():
    with open(args.junitxml) as fd:
        host = socket.gethostname()
        doc = xmltodict.parse(fd.read())
        test_groups = {'total': int(doc['testsuites']['testsuite']['@tests']), 'clowder': 0}
        elapsed_time = float(doc['testsuites']['testsuite']['@time'])
        log = {'errors': list(), 'failures': list(), 'timeouts': list(), 'skipped': list(), 'success': list()}
        processing_timeout = int(processingtimeout)
        testcases = doc['testsuites']['testsuite']['testcase']
        if not isinstance(doc['testsuites']['testsuite']['testcase'], list):
            testcases = list()
            testcases.append(doc['testsuites']['testsuite']['testcase'])

        for testcase in testcases:
            # create log message
            logmsg = dict()
            logmsg['name'] = testcase['@name']
            logmsg['classname'] = testcase['@classname']
            logmsg['time'] = float(testcase['@time'])
            if 'error' in testcase:
                msgtype = 'errors'
                logmsg['message'] = testcase['error']['@message']
                logmsg['trace'] = testcase['error']['#text']
            elif 'failure' in testcase:
                # group as time outs if longer than processing_timeout
                logmsg['message'] = testcase['failure']['@message']
                logmsg['trace'] = testcase['failure']['#text']
                timeoutfailure = logmsg['message'].endswith('Timeout')
                if timeoutfailure:
                    msgtype = 'timeouts'
                else:
                    msgtype = 'failures'
            elif 'skipped' in testcase:
                msgtype = 'skipped'
                logmsg['message'] = testcase['skipped']['@message']
            else:
                msgtype = 'success'
            if 'system-out' in testcase:
                logmsg['system-out'] = testcase['system-out']
            if 'system-err' in testcase:
                logmsg['system-err'] = testcase['system-err']

            # cleanup of message, see also:
            # http://stackoverflow.com/questions/40012526/junitxml-and-pytest-difference-in-message-when-running-in-parallel
            if 'message' in logmsg:
                if 'AssertionError: ' in logmsg['message']:
                    logmsg['message'] = re.sub(r".*E +(AssertionError: .*) E +assert.*", r"\1", logmsg['message'])
                if 'HTTPError: ' in logmsg['message']:
                    logmsg['message'] = re.sub(r".*E +(HTTPError: .*) {2}[^ ]*: HTTPError.*", r"\1", logmsg['message'])
                if 'OSError: ' in logmsg['message']:
                    logmsg['message'] = re.sub(r".*E +(OSError: .*) {2}[^ ]*: OSError.*", r"\1", logmsg['message'])

            # hide some private information, combine array into string
            for key in logmsg:
                if isinstance(logmsg[key], list):
                    logmsg[key] = "\n".join(logmsg[key])
                if 'username' in str(logmsg[key]):
                    logmsg[key] = re.sub(r"username = '[^']*'", "username = 'username'", logmsg[key])
                if 'password' in str(logmsg[key]):
                    logmsg[key] = re.sub(r"password = '[^']*'", "password = 'password'", logmsg[key])
                if 'api_key' in str(logmsg[key]):
                    logmsg[key] = re.sub(r"api_key = '[^']*'", "api_key = 'api_key'", logmsg[key])
                if 'api_token' in str(logmsg[key]):
                    logmsg[key] = re.sub(r"api_token = '[^']*'", "api_token = 'api_token'", logmsg[key])

            # group tests failures/errors
            if msgtype == 'errors' or msgtype == 'failures' or msgtype == 'timeouts':
                if 'test_extraction' in testcase['@classname']:
                    test_groups['clowder'] += 1

            log[msgtype].append(logmsg)

        mongoid = report_mongo(host, test_groups, elapsed_time, log)
        if console_notification:
            report_console(host, test_groups, elapsed_time, log, mongoid)
        report_email(host, test_groups, elapsed_time, log, mongoid)
        if slackurl:
            report_slack(host, test_groups, elapsed_time, log)
        report_msteam(host, test_groups, elapsed_time, log)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--junitxml", default="results.xml", help="junit results xml file generated by pytests")
    parser.add_argument("--console", action='store_true', help="should output goto console")
    parser.add_argument("--url", default="", help="URL of place to find results")
    args = parser.parse_args()
    # print args.echo

    with open("test_extraction_data.yml", 'r') as f:
        iterations = ruamel.yaml.load(f, ruamel.yaml.RoundTripLoader)
        notifications = iterations['notifications']
        if 'console' in notifications:
            console_notification = notifications['console'][0]['stdout']
        if 'slack' in notifications:
            slackurl = notifications['slack'][0]['slack_url']
            slackchannel = notifications['slack'][0]['slack_channel']
            slackuser = notifications['slack'][0]['slack_user']
            slacknotify = notifications['slack'][0]['notify']
        if 'msteams' in notifications:
            msteamurl = notifications['msteams'][0]['msteam_url']
            msteamnotify = notifications['msteams'][0]['notify']

        if 'mongo' in notifications:
            mongo_host = notifications['mongo']['host']
            mongo_db = notifications['mongo']['database']
            mongo_collection = notifications['mongo']['collection']
        if 'mail' in notifications:
            mail_server = notifications['mail']['server']
        if 'server' in notifications:
            servertype = notifications['server']['type']
            requesttimeout = notifications['server']['request_timeout']
            processingtimeout = notifications['server']['processing_timeout']

    main()
